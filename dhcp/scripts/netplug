#!/bin/bash
# netplug command
. /configs/config.sh

PATH=/usr/bin:/bin:/usr/sbin:/sbin
export PATH

dev="$1"
action="$2"

# Grab the iptables lock
# Use a global exclusive lock to avoid race conditons
exec 100>/tmp/dhcp_script.lock || exit 1
flock 100 || exit 1

#find the MAC address for this interface that the hostapd helper set.
# If this interface was not from hostapd, the mapping wont be there, so ignore it

if grep -q -F "$VLANSIF" <<< "$dev"; then
  if test -f "/sta_mac_iface_map/$dev"; then
    MAC=$(cat < /sta_mac_iface_map/$dev)
  fi

  # Try again
  if [ "$MAC" = "" ]; then
    sleep 1
    MAC=$(cat < /sta_mac_iface_map/$dev)
  fi
fi


# Requires the same directory for xdp-dispatcher.o
cd /code/xdp-tools/xdp-loader

case "$action" in
in)
    # ignore DHCP for WAN interface and SSID interface
    if [ "$dev" = "$WANIF" ] || [ "$dev" = "$SSID_INTERFACE" ]; then
      exit 0
    fi

    #remove the mac/dev from any of the dhcp verdict map elements
    nft -j list map inet filter dhcp_access | jq -rc '.nftables[1].map | .elem[] | .[] | .concat | if length > 0 then . else empty end | .[0] + " " + .[1]' 2>/dev/null | \
        (while read -a VMAP; do  grep -iE "${dev} |${MAC}" <<< ${VMAP[@]} && nft delete element inet filter dhcp_access { ${VMAP[0]} . ${VMAP[1]} : accept }; done )

    # Attach the filter
    ./xdp-loader load -m skb $dev /code/filter_dhcp_mismatch.o

     # Add to the dhcp verdict map if there is a MAC
     if [ '!' -z "$MAC" ]; then
        nft add element inet filter dhcp_access { ${dev} . ${MAC} : accept }
     fi

    ;;
out)
    #iptable rules were removed above

    # Detach the filter
    ./xdp-loader unload -a $dev

    ;;
probe)
    exec /sbin/ip link set "$dev" up >/dev/null 2>&1
    ;;
*)
    echo "I have been called with a funny action of '%s'!" 1>&2
    exit 1
    ;;
esac
